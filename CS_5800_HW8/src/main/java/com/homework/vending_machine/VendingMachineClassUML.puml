@startuml
class DispensingSnack implements StateOfVendingMachine{
    -VendingMachine vendingMachine
    +DispensingSnack(VendingMachine vendingMachine)
    +void selectSnack(String name)
    +void insertMoney(double amount)
    +void dispenseSnack()
}

class Idle implements StateOfVendingMachine{
    -VendingMachine vendingMachine
    +DispensingSnack(VendingMachine vendingMachine)
    +void selectSnack(String name)
    +void insertMoney(double amount)
    +void dispenseSnack()
}

class Snack implements  VendingMachine{
    -String name
    -double price
    -int quantity
    +Snack(String name, double price, int quantity)
    +String getName()
    +double getPrice()
    +int getQuantity()
    +void quantityDecrement()
    +boolean availability()
}

abstract class SnackDispenseHandler implements  VendingMachine{
    #SnackDispenseHandler nextHandler
    +void setNextHandler(SnackDispenseHandler nextHandler)
    +abstract void handleRequest(String snackName, VendingMachine vendingMachine)
}

class SnackHandler extends SnackDispenseHandler {
    -String nameOfSnack
    +SnackHandler(String snackName)
    +void handleRequest(String snackName, VendingMachine vendingMachine)
}

interface StateOfVendingMachine implements  VendingMachine{
    void selectSnack(String name)
    void insertMoney(double amount)
    void dispenseSnack()
}

class WaitingForMoney implements StateOfVendingMachine{
    -VendingMachine vendingMachine
    +DispensingSnack(VendingMachine vendingMachine)
    +void selectSnack(String name)
    +void insertMoney(double amount)
    +void dispenseSnack()
}

class VendingMachine {
    -Map<String, Snack> snacks = new HashMap<>()
    -double insertMoney
    -String snackSelected
    -StateOfVendingMachine idleState
    -StateOfVendingMachine waitingForMoneyState
    -StateOfVendingMachine dispensingSnackState
    -StateOfVendingMachine stateOfCurrent
    -SnackDispenseHandler snackChain
    +VendingMachine()
    +void addSnack(Snack snack)
    +void setChainOfSnack()
    +void selectSnack(String nameOfSnack)
    +void insertMoney(double amount)
    +void dispenseSnack()
    +Snack getSnackByName(String name)
    +double getPriceOfselectedSnack()
    +String getSelectedSnackName()
    +void setSelectSnack(String snackSelected)
    +void setInsertMoney(double insertMoney)
    +StateOfVendingMachine getIdleState()
    +StateOfVendingMachine getWaitingForMoneyState()
    +StateOfVendingMachine getDispensingSnackState()
    +void setCurrentState(StateOfVendingMachine stateOfCurrent)
}

@enduml
